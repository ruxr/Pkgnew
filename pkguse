#!/bin/sh
#
#	@(#) pkguse V1.19 (C) 2019 by Roman Oreshnikov
#
URL=http://crux/CRUX-3.5
HLP="Synchronize ${URL##*/} packages with MasterHost

Usage: pkguse [options] [packages]
Options:
  -d      Remove specified packages
  -f      Force installation
  -h      Display this text
  -i      Ignore inverse dependencies
  -r ROOT Specify alternative installation root
  -s      Synchronize packages, default: compare
  -u URL  MasterHost URL, default: $URL

Report bugs to <r.oreshnikov@gmail.com>"
Msg() { echo pkguse: $* >&2; }
Err() { Msg $*; exit 1; }
End() { trap 0; [ -z "$WRK" ] || /bin/rm -rf $WRK; Msg ${*:-Done}; }
Chk() {
	case " $* " in *\ $N\ *) return;; esac
	case $P in [a-z]*) ALL=$P\ $ALL;; esac
	DEL=
	for P do
		case " $R " in
		*\ $P\ *) Msg Unable to remove $P, required for $N;;
		*) DEL=$DEL\ $P
		esac
	done
	set -- $ADD
	ADD=
	for P do [ $P = $N ] && NEW=$NEW\ $N || ADD=$ADD\ $P; done
	for P in $R $N; do
		case " $PKG " in *\ $P\ *);; *) PKG=$PKG\ $P;; esac
	done
}
Get() {
	[ -z "$WRK" -o -z "$SRC" ] || /bin/rm $SRC
	SRC=${WRK:-$URL}/$1${2:+#$2}
	[ -z "$WRK" ] || /usr/bin/wget -qO "$SRC" "$URL/$1${2:+%23$2}" || SRC=
	[ -n "$SRC" -a -r "$SRC" ] || Err Failure to get $1${2:+#$2}
}
Who() {
	local U u G g H C T
	U=$1 u=$2; shift 2
	case $1 in ''|/*) G=$U g=$u;; *) G=$1 g=$2; shift 2;; esac
	[ $# != 0 ] && H=$1 && shift || H=/
	[ -f "$DST/etc/passwd" ] &&
		T=$(/bin/sed "/^$G:/!d;s/.*/1/;q" "$DST/etc/group"
		/bin/sed "/^$U:[^:]*:$u:$g:/!d;s/.*/2/;q" "$DST/etc/passwd"
		/bin/sed "/^$U:/!d;s/.*/3/;q" "$DST/etc/shadow") || T=
	case $T in
	1*2*3);;
	'')	echo Creating user $U; [ -z "$CHK" ] ||
		if [ -x "$DST/usr/sbin/useradd" ]; then
			/usr/sbin/groupadd ${DST:+-R "$DST"} -g $g $G
			/usr/sbin/useradd ${DST:+-R "$DST"} -u $u -g $G -d $H \
				${*:+-c "$*"} $U
		else
			echo "$G::$g:" >>"$DST/etc/group"
			echo "$U:x:$u:$g:$*:$H:" >>"$DST/etc/passwd"
			echo "$U:x:0::::::" >>"$DST/etc/shadow"
		fi;;
	*) T="User $U created with errors"; [ -z "$CHK" ] && Msg $T || Err $T
	esac
}
ADD=
CHK=
DBD=/var/lib/pkg/db
DEL=
DST=
EXT=
IGN=
NEW=
OPT=
PKG=
SRC=
USE=
WRK=/tmp/.pkguse$$
while getopts dfhir:su: V; do
	case $V in
	d)	DEL=y;;
	f)	OPT=-f;;
	h)	echo "$HLP"; exit 0;;
	i)	IGN=y;;
	r)	DST=$OPTARG;;
	s)	CHK=synchronized\ with;;
	u)	URL=${OPTARG:-.};;
	?)	Err '\rUsage: pkguse [-r root] [-u url] [-dfis] [pkg ...]'
	esac
done
shift $(($OPTIND - 1))
set -e
trap "End Terminated due to error!" 0
trap "End Interrupted by signal!" 1 2 3 13 15
[ -z "$DEL" -o $# != 0 ] || Err Option -d requires a list of packages
if [ -n "$DST" ]; then
	[ -d "$DST" ] || Err $DST - no such directory
	case $DST in /*);; *) DST=$(pwd -P)/$DST;; esac
	DBD=$DST$DBD
fi
case $URL in
http://[a-z0-9]*|https://[a-z0-9]*|ftp://[a-z0-9]*);;
*) [ -d "$URL" ] || Err $URL - no such directory; WRK=
esac
for V do
	case -$V- in
	*--*|*[!a-zA-Z0-9_+-]*|-[0-9_+]*) Err Invalid package name $V
	esac
done
if [ -f "$DBD" ]; then
	USE=$(/bin/sed '${x;s/\n/ /g;q}
		/\//d;/^$/d;/^lib64/d;N;s/\n/#/;H;d' "$DBD")
elif [ -n "$CHK" ]; then
	/bin/mkdir -p "${DBD%/*}" && echo >$DBD
fi
[ -n "$DEL" ] && DEL=$* || ADD=$*
[ -n "$USE$ADD" ] || Err Empty package list
[ -z "$WRK" ] || /bin/mkdir $WRK
Msg Packages are ${CHK:-compared to} $URL${DST:+ for $DST}
Get PKG.use
V=+
while [ "$V" != "$PKG" ]; do
	ALL= RUN= V=$PKG WHO=:
	exec <$SRC
	while read P R; do
		case $P in
		+)	RUN=$R\ $RUN;;
		@)	WHO=:$R\ $WHO;;
		.*)	EXT=$P;;
		*)	N=${P%#*}
			case " $USE $ADD $PKG " in *\ $N[#\ ]*) Chk $DEL;; esac
		esac
	done
done
for P in $USE; do
	P=${P%#*}
	case " $ALL " in
	*\ $P#*);;
	*) echo Remove $P; [ -z "$CHK" ] || /usr/bin/pkgrm ${DST:+-r "$DST"} $P
	esac
done
for P in $ADD; do Msg Unable to install unknown package $P; done
for P in $ALL; do
	N=${P%#*}
	case " $NEW " in
	*\ $N\ *);;
	*)	case " $USE " in *\ $P\ *) [ -n "$DST" ] || continue;; esac
		NEW=$NEW\ $N
	esac
done
if [ -z "$IGN" ]; then
	exec <"$SRC"
	while read P R; do
		case " $ALL " in *\ $P\ *) N=${P%#*}
			for P in $R; do
				case " $NEW " in
				*\ $N\ *) break;;
				*\ $P\ *) NEW=$NEW\ $N; break
				esac
			done
		esac
	done
fi
for P in $ALL; do
	N=${P%#*} V=${P#*#}
	case " $NEW " in *\ $N\ *);; *) continue;; esac
	case " $WHO " in *\ :$N\ *) T=${WHO#*:$N } T=${T%%:*}; Who $T;; esac
	case " $USE " in
	*\ $N#*) T=${USE#* $N#} T=${T%% *}; echo Upgrade $N $T to $V;;
	*) T=; echo Install $N $V
	esac
	[ -z "$CHK" ] || ! Get $N $V$EXT ||
		/usr/bin/pkgadd $OPT ${DST:+-r "$DST"} ${T:+-u} "$SRC"
	case " $RUN " in *\ $N\ *)
		echo Post-install $N $V
		[ -z "$CHK" ] || ! Get $N $V.post-install ||
			/bin/sh "$SRC" ${DST:+"$DST"}
	esac
done
End
